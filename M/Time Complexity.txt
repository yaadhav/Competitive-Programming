TIME COMPLEXITY

O(1) < O(logn) < O(sqrtn) < O(n) < O(nlogn) < O(n**2 < O(n**3) < O(2**n) < O(n!) 

ESTIMATING EFFICIENCY:
The following table contains some useful estimates assuming
a time limit of ONE SECOND. 

input size required   time complexity
	n ≤ 10 				 O(n!)
	n ≤ 20 				 O(2**n)
	n ≤ 500 			 O(n**3)
	n ≤ 5000 			 O(n**2)
	n ≤ 10**6 			 O(nlogn) or O(n)
	n is large 			 O(1) or O(logn)

LOOPS:
If there are k nested loops, the time complexity is O(n**k)

the time complexity of the following code is O(n):

	for (int i = 1; i <= n; i++) {
	// code
	}

And the time complexity of the following code is O(n**2):

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
		// code
		}
	}

ORDER OF MAGNITUDE:
In the following
examples, the code inside the loop is executed 3n, n+5 and dn/2e times, but the
time complexity of each code is O(n).

	for (int i = 1; i <= 3*n; i++) {
	// code
	}

	for (int i = 1; i <= n+5; i++) {
	// code
	}

	for (int i = 1; i <= n; i += 2) {
	// code
	}

SEVERAL VARIABLES:
For example, the time complexity of the following code is O(nm):

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
		// code
		}
	}

